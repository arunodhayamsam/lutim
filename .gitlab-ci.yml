image: hatsoftwares/lutim-test-ci:latest
stages:
  - publish_changelog
  - podcheck
  - carton
  - carton_bdd
  - tests
  - cover
before_script:
  - rm -f *.db
variables:
  POSTGRES_DB: lutim_db
  POSTGRES_USER: lutim
  POSTGRES_PASSWORD: lutim_pwd

### Jobs templates
##
#
.retry: &retry
  retry: 2
  except:
    - tags
.carton_bdd_template: &carton_bdd_definition
  <<: *retry
  stage: carton_bdd
  artifacts:
    paths:
      - local/
  dependencies:
    - carton
.sqlite_template: &sqlite_definition
  <<: *retry
  stage: tests
  artifacts:
    paths:
      - cover_db/
  dependencies:
    - carton_sqlite
.pg_template: &pg_definition
  <<: *retry
  stage: tests
  artifacts:
    paths:
      - cover_db/
  dependencies:
    - carton_postgresql
  services:
    - name: postgres:9.6
      alias: postgres

### Publish tag changelog
##
#
publish_changelog:
  image: hatsoftwares/curl-jq:latest
  stage: publish_changelog
  script:
    - export PROJECT_API_URL="https://framagit.org/api/v4/projects/${CI_PROJECT_ID}"
    - export DESCRIPTION_URL="${PROJECT_API_URL}/repository/tags/${CI_COMMIT_TAG}/release"
    - 'export HEADER="Private-Token: ${GITLAB_API_TOKEN}"'
    - sed -n '/^'$CI_COMMIT_TAG'[[:space:]]/,/^[^\t]/p' CHANGELOG | sed -e 's/^[^\t].*//' -e 's/\t//g' | sed '/^[[:space:]]*$/d' > /tmp/text
    - if [[ ! -z $GITLAB_API_TOKEN ]]; then curl -s --request POST --data-urlencode "description@/tmp/text" --header "${HEADER}" "${DESCRIPTION_URL}"; fi
  only:
    - tags

### Podcheck
##
#
podcheck:
  <<: *retry
  stage: podcheck
  script:
    - make podcheck

### Install common dependencies
##
#
carton:
  <<: *retry
  stage: carton
  artifacts:
    paths:
      - local/
  dependencies: []
  script:
    - carton install --deployment --without=sqlite --without=postgresql --without=minion --without=cache --without=memcached
  when: always

### Install DB related dependencies
##
#
carton_sqlite:
  <<: *carton_bdd_definition
  script:
    - carton install --deployment --without=postgresql --without=minion --without=cache --without=memcached
carton_postgresql:
  <<: *carton_bdd_definition
  script:
    - carton install --deployment --without=sqlite --without=minion --without=cache --without=memcached

### SQLite tests
##
#
sqlite1:
  <<: *sqlite_definition
  script:
    - carton install --deployment --without=postgresql --without=minion --without=cache --without=memcached
    - MOJO_CONFIG=t/sqlite1.conf make test-sqlite
    - MOJO_CONFIG=t/sqlite1.conf make watch
    - MOJO_CONFIG=t/sqlite1.conf make cleanbdd
    - MOJO_CONFIG=t/sqlite1.conf make cleanfiles
    - MOJO_CONFIG=t/sqlite1.conf make stats
sqlite2:
  <<: *sqlite_definition
  script:
    - carton install --deployment --without=postgresql --without=cache --without=memcached
    - MOJO_CONFIG=t/sqlite2.conf make minion &
    - sleep 3
    - MOJO_CONFIG=t/sqlite2.conf make test-sqlite
    - MOJO_CONFIG=t/sqlite2.conf make watch
    - MOJO_CONFIG=t/sqlite2.conf make cleanbdd
    - MOJO_CONFIG=t/sqlite2.conf make cleanfiles
    - MOJO_CONFIG=t/sqlite2.conf make stats
sqlite3:
  <<: *sqlite_definition
  services:
    - name: postgres:9.6
      alias: postgres
  script:
    - carton install --deployment --without=cache --without=memcached
    - export PGPASSWORD=lutim_pwd; echo 'CREATE DATABASE lutim_minion WITH OWNER lutim;' | psql -h postgres -U lutim lutim_db
    - MOJO_CONFIG=t/sqlite3.conf make minion &
    - sleep 3
    - MOJO_CONFIG=t/sqlite3.conf make test-sqlite
    - MOJO_CONFIG=t/sqlite3.conf make watch
    - MOJO_CONFIG=t/sqlite3.conf make cleanbdd
    - MOJO_CONFIG=t/sqlite3.conf make cleanfiles
    - MOJO_CONFIG=t/sqlite3.conf make stats

### PostgreSQL tests
##
#
postgresql1:
  <<: *pg_definition
  script:
    - carton install --deployment --without=sqlite --without=minion --without=cache --without=memcached
    - MOJO_CONFIG=t/postgresql1.conf make test-pg
    - MOJO_CONFIG=t/postgresql1.conf make watch
    - MOJO_CONFIG=t/postgresql1.conf make cleanbdd
    - MOJO_CONFIG=t/postgresql1.conf make cleanfiles
    - MOJO_CONFIG=t/postgresql1.conf make stats
postgresql2:
  <<: *pg_definition
  script:
    - carton install --deployment --without=cache --without=memcached
    - MOJO_CONFIG=t/postgresql2.conf make minion &
    - sleep 3
    - MOJO_CONFIG=t/postgresql2.conf make test-pg
    - MOJO_CONFIG=t/postgresql2.conf make watch
    - MOJO_CONFIG=t/postgresql2.conf make cleanbdd
    - MOJO_CONFIG=t/postgresql2.conf make cleanfiles
    - MOJO_CONFIG=t/postgresql2.conf make stats
postgresql3:
  <<: *pg_definition
  script:
    - carton install --deployment --without=sqlite --without=cache --without=memcached
    - export PGPASSWORD=lutim_pwd; echo 'CREATE DATABASE lutim_minion WITH OWNER lutim;' | psql -h postgres -U lutim lutim_db
    - MOJO_CONFIG=t/postgresql3.conf make minion &
    - sleep 3
    - MOJO_CONFIG=t/postgresql3.conf make test-pg
    - MOJO_CONFIG=t/postgresql3.conf make watch
    - MOJO_CONFIG=t/postgresql3.conf make cleanbdd
    - MOJO_CONFIG=t/postgresql3.conf make cleanfiles
    - MOJO_CONFIG=t/postgresql3.conf make stats

### Code coverage
##
#
cover:
  stage: cover
  script:
    - make cover
  coverage: '/Total .*\d+\.\d+$/'

### Push new translations strings to https://trad.framasoft.org
##
#
trads:
  stage: cover
  image: framasoft/push-trad:latest
  dependencies: []
  script:
  - sed -e "s@<project-version>.*</project-version>@<project-version>$CI_COMMIT_REF_SLUG</project-version>@" -i zanata.xml
  - if [ ! -z ${ZANATA_CONFIG+x} ]; then mkdir -p ${HOME}/.config; echo -e "${ZANATA_CONFIG}" > ${HOME}/.config/zanata.ini; fi
  - if [ ! -z ${ZANATA_CONFIG+x} ]; then make push-locales; fi
  only:
    - development
    - master
